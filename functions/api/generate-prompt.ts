// File: functions/api/generate-prompt.ts

import { GoogleGenAI } from "@google/genai";
import type { Language, Domain, OutputLength, PromptType } from '../../types'; // Adjust path as needed
import { translations as appTranslations } from '../../constants'; // Renamed to avoid conflict

// This is the structure of the incoming request body from the client
interface GeneratePromptParams {
  rawRequest: string;
  promptType: PromptType;
  domain: Domain;
  language: Language;
  outputLength: OutputLength;
  expertRole: string;
  mission: string;
  constraints: string;
}

// Define the structure for Cloudflare Pages Functions onRequestPost
// The 'context' object contains 'request' and 'env'
interface EventContext {
  request: Request;
  env: {
    API_KEY?: string; // Environment variable for the API key
    [key: string]: any; // Allows for other environment variables
  };
  params: any; // For route parameters, not used here
  waitUntil: (promise: Promise<any>) => void;
  next: (input?: Request | string, init?: RequestInit) => Promise<Response>;
  functionPath: string;
}

// Enhanced metaPromptTranslations with detailed methodology for both approaches
const metaPromptTranslations = {
  en: {
    systemInstructionBase: "You are an expert prompt engineering assistant. Your task is to generate a highly effective, structured prompt that guides toward professional-quality results. The final prompt you generate MUST be in {TARGET_LANGUAGE}. Do not add any explanatory text before or after the generated prompt. Only output the prompt itself, adhering strictly to the provided template structure.",
    
    userQueryHeader: "Please generate a structured prompt. Here are the details:",
    rawRequestLabel: "User's Goal / Raw Request:",
    promptTypeLabel: "Chosen Prompt Structure Type:",
    domainLabel: "Domain:",
    outputLengthLabel: "Desired Output Length for the AI using the generated prompt:",
    expertRoleLabel: "Expert Role for the AI using the generated prompt:",
    missionLabel: "Main Mission for the AI using the generated prompt:",
    constraintsLabel: "Constraints for the AI using the generated prompt (one per line):",
    noneSpecified: "None specified",
    finalPromptLangLabel: "The language for the final prompt itself MUST be: {TARGET_LANGUAGE}.",
    constructPromptInstruction: "Now, based on whether the type is MVP or AGENTIC, construct the prompt using the following templates and information.",
    
    // Enhanced MVP Section
    mvpTemplateHeader: "For an \"MVP\" type prompt, use this template:",
    mvpSystemRole: "You are an excellent {expertRolePlaceholder}: knowledgeable, precise, pedagogical. Your mission is to {missionPlaceholder}.",
    mvpExpertPlaceholder: "Expert",
    mvpMissionPlaceholder: "help effectively",
    
    // Enhanced Methodology for MVP
    mvpMethodologyHeader: "DETAILED METHODOLOGY - Follow this structured approach:",
    mvpAnalysisHeader: "1. IN-DEPTH ANALYSIS:",
    mvpAnalysisTasks: [
      "Meticulously analyze all elements provided in the request above",
      "Identify explicit and implicit objectives, quality criteria, and success metrics",
      "Note technical, creative, and logistical constraints to be respected", 
      "Evaluate context, underlying challenges, and optimization opportunities",
      "Determine the most appropriate resources, tools, and approaches"
    ],
    mvpPlanningHeader: "2. STRATEGIC PLANNING:",
    mvpPlanningTasks: [
      "Consider multiple methodological approaches to address the request optimally",
      "Rigorously evaluate advantages, disadvantages, and implications of each strategy",
      "Select the most appropriate approach and formulate clear justification for this choice",
      "Plan logical structure, progression, and optimal organization of the deliverable",
      "Anticipate execution challenges and prepare adaptation strategies if necessary"
    ],
    mvpExecutionHeader: "3. PROFESSIONAL EXECUTION:",
    mvpExecutionTasks: [
      "Produce a deliverable organized according to clear professional architecture",
      "Use premium formatting with appropriate sections, subsections, and structural elements",
      "Integrate concrete examples, evidence, data, and relevant references to support quality",
      "Scrupulously respect all constraints, specifications, and formulated requirements",
      "Systematically aim for professional-level quality that exceeds standard expectations",
      "Personalize content to maximize its specific relevance and added value"
    ],
    
    mvpExpectedOutputFormat: "Expected output format:",
    mvpLength: "Length:",
    mvpStyle: "Style: Clear and structured",
    mvpLanguage: "Language: {TARGET_LANGUAGE}",
    
    // Fixed Example Instruction  
    mvpExampleInstruction: "(Generate a concrete example showing the EXACT format of the expected output beginning. Do NOT describe the process or explain what the AI will do. Show the direct start of the final deliverable. Examples: For podcast ‚Üí actual dialogue lines ('Voice 1: Welcome everyone to today's show...'), for lesson plan ‚Üí actual lesson structure ('LESSON: [Title] | OBJECTIVES: Students will be able to... | MODULE 1: [Content]...'), for analysis ‚Üí actual analysis format ('EXECUTIVE SUMMARY: This analysis reveals... | KEY FINDINGS: 1. [Primary insight]...'). The example must be a direct sample of the deliverable, not a process description.)",
    
    mvpFooter: "Ensure the entire output is *only* the prompt text, starting with \"<System>:\" and ending appropriately based on the template. Do not add any other commentary.",
    
    // Enhanced AGENTIC Section
    agenticTemplateHeader: "For an \"AGENTIC\" type prompt, use this template. This prompt is for an AI capable of autonomous action, thinking, and iteration. It MUST include self-assessment capabilities.",
    agenticTitleInstruction: "[Generate a concise and descriptive title (max 5-7 words) derived from the user's raw request.]",
    agenticRole: "{expertRolePlaceholder} (Agentic AI)",
    agenticExpertPlaceholder: "Expert Analyst", 
    agenticNote: "*Note: \"Agentic AI\" means an AI capable of acting autonomously, thinking, and iterating on its work.*",
    agenticContext: "Context:",
    agenticInstructionsHeader: "Instructions:",
    
    // Same detailed methodology for AGENTIC (reusing MVP tasks)
    agenticAnalysisHeader: "1. IN-DEPTH ANALYSIS:",
    agenticAnalysisTasks: [
      "Meticulously analyze all elements provided related to the Context above",
      "Identify explicit and implicit objectives, quality criteria, and success metrics",
      "Note technical, creative, and logistical constraints to be respected",
      "Evaluate context, underlying challenges, and optimization opportunities", 
      "Determine the most appropriate resources, tools, and approaches"
    ],
    agenticThinkingHeader: "2. STRATEGIC PLANNING:",
    agenticThinkingTasks: [
      "Consider multiple methodological approaches to address the Context optimally",
      "Rigorously evaluate advantages, disadvantages, and implications of each strategy",
      "Select the most appropriate approach and formulate clear justification for this choice",
      "Plan logical structure, progression, and optimal organization of the deliverable",
      "Anticipate execution challenges and prepare adaptation strategies if necessary"
    ],
    agenticDevelopmentHeader: "3. PROFESSIONAL EXECUTION:",
    agenticDevelopmentTasks: [
      "Produce a deliverable organized according to clear professional architecture",
      "Use premium formatting with appropriate sections, subsections, and structural elements", 
      "Integrate concrete examples, evidence, data, and relevant references to support quality",
      "Scrupulously respect all constraints, specifications, and formulated requirements",
      "Systematically aim for professional-level quality that exceeds standard expectations",
      "Personalize content to maximize its specific relevance and added value"
    ],
    
    // Self-Assessment (AGENTIC only)
    agenticSelfAssessmentHeader: "4. SELF-ASSESSMENT AND CONTINUOUS IMPROVEMENT:",
    agenticSelfAssessmentQuestion1: "At the end of its work, the AI executing this prompt **must always ask the user verbatim**:\n    \"ü§î Would you like me to evaluate this result against key criteria and provide suggestions for improvement? (Yes/No)\"",
    agenticSelfAssessmentInstruction: "If the user responds \"Yes\" (or similar affirmative), the AI should then perform a self-assessment using the following evaluation method, presenting it in a table:",
    agenticEvaluationCriteria: {
        education: ['Pedagogical Clarity', 'Level Appropriateness', 'Learner Engagement', 'Logical Progression'],
        technical: ['Technical Accuracy', 'Completeness of Analysis', 'Rigorous Methodology', 'Actionable Recommendations'],
        other: ['Originality', 'Coherence', 'Impact', 'Quality of Execution']
    },
    agenticEvalTableHeader: "| Criterion                     | Rating (/10) | Justification for Rating | Concrete Suggestions for Improvement |\n    |-------------------------------|--------------|--------------------------|--------------------------------------|",
    agenticSelfAssessmentQuestion2: "After presenting the evaluation, the AI **must also ask the user verbatim**:\n    \"Based on the evaluation above, would you like me to attempt to improve the draft? (Yes/No)\"",
    agenticFooter: "Ensure the entire output is *only* the prompt text, starting with \"Title:\" and ending appropriately based on the template. Do not add any other commentary.",
  },
  
  fr: {
    systemInstructionBase: "Vous √™tes un assistant expert en ing√©nierie de prompts. Votre t√¢che est de g√©n√©rer un prompt structur√©, hautement efficace, qui guide vers des r√©sultats de qualit√© professionnelle. Le prompt final que vous g√©n√©rez DOIT √™tre en {TARGET_LANGUAGE}. N'ajoutez aucun texte explicatif avant ou apr√®s le prompt g√©n√©r√©. Ne retournez que le prompt lui-m√™me, en respectant strictement la structure du mod√®le fourni.",
    
    userQueryHeader: "Veuillez g√©n√©rer un prompt structur√©. Voici les d√©tails :",
    rawRequestLabel: "Objectif / Demande brute de l'utilisateur :",
    promptTypeLabel: "Type de structure de prompt choisi :",
    domainLabel: "Domaine :",
    outputLengthLabel: "Longueur de sortie souhait√©e pour l'IA utilisant le prompt g√©n√©r√© :",
    expertRoleLabel: "R√¥le d'expert pour l'IA utilisant le prompt g√©n√©r√© :",
    missionLabel: "Mission principale pour l'IA utilisant le prompt g√©n√©r√© :",
    constraintsLabel: "Contraintes pour l'IA utilisant le prompt g√©n√©r√© (une par ligne) :",
    noneSpecified: "Aucune sp√©cifi√©e",
    finalPromptLangLabel: "La langue du prompt final lui-m√™me DOIT √™tre : {TARGET_LANGUAGE}.",
    constructPromptInstruction: "Maintenant, selon que le type est MVP ou AGENTIQUE, construisez le prompt en utilisant les mod√®les et informations suivants.",
    
    // Enhanced MVP Section - French
    mvpTemplateHeader: "Pour un prompt de type \"MVP\", utilisez ce mod√®le :",
    mvpSystemRole: "Vous √™tes un excellent {expertRolePlaceholder} : comp√©tent, pr√©cis, p√©dagogue. Votre mission est d'{missionPlaceholder}.",
    mvpExpertPlaceholder: "Expert",
    mvpMissionPlaceholder: "aider efficacement",
    
    // Enhanced Methodology for MVP - French
    mvpMethodologyHeader: "M√âTHODOLOGIE D√âTAILL√âE - Suivez cette approche structur√©e :",
    mvpAnalysisHeader: "1. ANALYSE APPROFONDIE :",
    mvpAnalysisTasks: [
      "Analysez m√©ticuleusement tous les √©l√©ments fournis dans la demande ci-dessus",
      "Identifiez les objectifs explicites et implicites, crit√®res de qualit√© et m√©triques de r√©ussite",
      "Notez les contraintes techniques, cr√©atives et logistiques √† respecter",
      "√âvaluez le contexte, les d√©fis sous-jacents et les opportunit√©s d'optimisation",
      "D√©terminez les ressources, outils et approches les plus appropri√©s"
    ],
    mvpPlanningHeader: "2. PLANIFICATION STRAT√âGIQUE :",
    mvpPlanningTasks: [
      "Consid√©rez de multiples approches m√©thodologiques pour aborder la demande de mani√®re optimale",
      "√âvaluez rigoureusement les avantages, inconv√©nients et implications de chaque strat√©gie",
      "S√©lectionnez l'approche la plus appropri√©e et formulez une justification claire de ce choix",
      "Planifiez la structure logique, la progression et l'organisation optimale du livrable",
      "Anticipez les d√©fis d'ex√©cution et pr√©parez des strat√©gies d'adaptation si n√©cessaire"
    ],
    mvpExecutionHeader: "3. EX√âCUTION PROFESSIONNELLE :",
    mvpExecutionTasks: [
      "Produisez un livrable organis√© selon une architecture professionnelle claire",
      "Utilisez un formatage premium avec sections, sous-sections et √©l√©ments de structuration appropri√©s",
      "Int√©grez des exemples concrets, preuves, donn√©es et r√©f√©rences pertinentes pour √©tayer la qualit√©",
      "Respectez scrupuleusement toutes les contraintes, sp√©cifications et exigences formul√©es",
      "Visez syst√©matiquement un niveau de qualit√© professionnel qui d√©passe les attentes standard",
      "Personnalisez le contenu pour maximiser sa pertinence et sa valeur ajout√©e sp√©cifique"
    ],
    
    mvpExpectedOutputFormat: "Format de sortie attendu :",
    mvpLength: "Longueur :",
    mvpStyle: "Style : Clair et structur√©",
    mvpLanguage: "Langue : {TARGET_LANGUAGE}",
    
    // Fixed Example Instruction - French
    mvpExampleInstruction: "(G√©n√©rez un exemple concret montrant le FORMAT EXACT du d√©but du livrable attendu. NE PAS d√©crire le processus ou expliquer ce que l'IA va faire. Montrez directement le d√©but du r√©sultat final. Exemples : Pour podcast ‚Üí lignes de dialogue r√©elles ('Voix 1: Bienvenue dans cette √©mission...'), pour plan de cours ‚Üí structure de cours r√©elle ('COURS: [Titre] | OBJECTIFS: Les apprenants seront capables de... | MODULE 1: [Contenu]...'), pour analyse ‚Üí format d'analyse r√©el ('SYNTH√àSE EX√âCUTIVE: Cette analyse r√©v√®le... | POINTS CL√âS: 1. [Insight principal]...'). L'exemple doit √™tre un √©chantillon direct du livrable, pas une description du processus.)",
    
    mvpFooter: "Assurez-vous que l'ensemble de la sortie soit *uniquement* le texte du prompt, commen√ßant par \"<System>:\" et se terminant de mani√®re appropri√©e selon le mod√®le. N'ajoutez aucun autre commentaire.",
    
    // Enhanced AGENTIC Section - French (same structure, with self-assessment)
    agenticTemplateHeader: "Pour un prompt de type \"AGENTIQUE\", utilisez ce mod√®le. Ce prompt est destin√© √† une IA capable d'action autonome, de r√©flexion et d'it√©ration. Il DOIT inclure des capacit√©s d'auto-√©valuation.",
    agenticTitleInstruction: "[G√©n√©rez un titre concis et descriptif (max 5-7 mots) d√©riv√© de la demande brute de l'utilisateur.]",
    agenticRole: "{expertRolePlaceholder} (IA Agentique)",
    agenticExpertPlaceholder: "Analyste Expert",
    agenticNote: "*Note : \"IA Agentique\" signifie une IA capable d'agir de mani√®re autonome, de r√©fl√©chir et d'it√©rer sur son travail.*",
    agenticContext: "Contexte :",
    agenticInstructionsHeader: "Instructions :",
    
    // Same detailed methodology for AGENTIC - French
    agenticAnalysisHeader: "1. ANALYSE APPROFONDIE DES INFORMATIONS FOURNIES :",
    agenticAnalysisTasks: [
      "Analysez m√©ticuleusement tous les √©l√©ments fournis relatifs au Contexte ci-dessus",
      "Identifiez les objectifs explicites et implicites, crit√®res de qualit√© et m√©triques de r√©ussite",
      "Notez les contraintes techniques, cr√©atives et logistiques √† respecter",
      "√âvaluez le contexte, les d√©fis sous-jacents et les opportunit√©s d'optimisation",
      "D√©terminez les ressources, outils et approches les plus appropri√©s"
    ],
    agenticThinkingHeader: "2. R√âFLEXION APPROFONDIE & PLANIFICATION :",
    agenticThinkingTasks: [
      "Consid√©rez de multiples approches m√©thodologiques pour aborder le Contexte de mani√®re optimale",
      "√âvaluez rigoureusement les avantages, inconv√©nients et implications de chaque strat√©gie",
      "S√©lectionnez l'approche la plus appropri√©e et formulez une justification claire de ce choix",
      "Planifiez la structure logique, la progression et l'organisation optimale du livrable",
      "Anticipez les d√©fis d'ex√©cution et pr√©parez des strat√©gies d'adaptation si n√©cessaire"
    ],
    agenticDevelopmentHeader: "3. D√âVELOPPEMENT STRUCTUR√â & EX√âCUTION :",
    agenticDevelopmentTasks: [
      "Produisez un livrable organis√© selon une architecture professionnelle claire",
      "Utilisez un formatage premium avec sections, sous-sections et √©l√©ments de structuration appropri√©s",
      "Int√©grez des exemples concrets, preuves, donn√©es et r√©f√©rences pertinentes pour √©tayer la qualit√©",
      "Respectez scrupuleusement toutes les contraintes, sp√©cifications et exigences formul√©es",
      "Visez syst√©matiquement un niveau de qualit√© professionnel qui d√©passe les attentes standard",
      "Personnalisez le contenu pour maximiser sa pertinence et sa valeur ajout√©e sp√©cifique"
    ],
    
    // Self-Assessment (AGENTIC only) - French
    agenticSelfAssessmentHeader: "4. AUTO-√âVALUATION ET AM√âLIORATION CONTINUE :",
    agenticSelfAssessmentQuestion1: "√Ä la fin de son travail, l'IA ex√©cutant ce prompt **doit toujours demander √† l'utilisateur textuellement** :\n    \"ü§î Souhaitez-vous que j'√©value ce r√©sultat par rapport √† des crit√®res cl√©s et que je fournisse des suggestions d'am√©lioration ? (Oui/Non)\"",
    agenticSelfAssessmentInstruction: "Si l'utilisateur r√©pond \"Oui\" (ou une affirmation similaire), l'IA doit alors effectuer une auto-√©valuation en utilisant la m√©thode d'√©valuation suivante, en la pr√©sentant dans un tableau :",
    agenticEvaluationCriteria: {
        education: ['Clart√© P√©dagogique', 'Ad√©quation au Niveau', 'Engagement de l\'Apprenant', 'Progression Logique'],
        technical: ['Exactitude Technique', 'Compl√©tude de l\'Analyse', 'M√©thodologie Rigoureuse', 'Recommandations Actionnables'],
        other: ['Originalit√©', 'Coh√©rence', 'Impact', 'Qualit√© d\'Ex√©cution']
    },
    agenticEvalTableHeader: "| Crit√®re                       | Note (/10)   | Justification de la Note | Suggestions Concr√®tes d'Am√©lioration |\n    |-------------------------------|--------------|--------------------------|--------------------------------------|",
    agenticSelfAssessmentQuestion2: "Apr√®s avoir pr√©sent√© l'√©valuation, l'IA **doit √©galement demander √† l'utilisateur textuellement** :\n    \"Sur la base de l'√©valuation ci-dessus, souhaitez-vous que j'essaie d'am√©liorer le brouillon ? (Oui/Non)\"",
    agenticFooter: "Assurez-vous que l'ensemble de la sortie soit *uniquement* le texte du prompt, commen√ßant par \"Titre:\" et se terminant de mani√®re appropri√©e selon le mod√®le. N'ajoutez aucun autre commentaire.",
  }
};

const GEMINI_MODEL_NAME = 'gemini-2.5-pro-preview-05-06'; // As per user request

export const onRequestPost: (context: EventContext) => Promise<Response> = async (context) => {
  const { request, env } = context;
  const API_KEY = env.API_KEY;

  if (!API_KEY) {
    return new Response(JSON.stringify({ error: "API_KEY is not configured in the server environment." }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }

  let params: GeneratePromptParams;
  try {
    params = await request.json();
  } catch (e) {
    return new Response(JSON.stringify({ error: "Invalid JSON in request body." }), {
      status: 400,
      headers: { 'Content-Type': 'application/json' },
    });
  }
  
  const tMeta = metaPromptTranslations[params.language] || metaPromptTranslations.en;
  const tApp = appTranslations[params.language] || appTranslations.en;

  const ai = new GoogleGenAI({ apiKey: API_KEY });

  const {
    rawRequest,
    promptType,
    domain,
    language, // language of the UI, and thus the meta-prompt
    outputLength,
    expertRole,
    mission,
    constraints,
  } = params;

  const finalPromptTargetLanguageString = language === 'fr' ? 'Fran√ßais' : 'English';
  const formattedConstraints = constraints.split('\n').filter(c => c.trim()).map(c => `- ${c.trim()}`).join('\n');
  
  // Enhanced system instruction with language replacement
  let systemInstruction = tMeta.systemInstructionBase.replace('{TARGET_LANGUAGE}', finalPromptTargetLanguageString);
  
  let userQuery = `
${tMeta.userQueryHeader}

${tMeta.rawRequestLabel}
"${rawRequest}"

${tMeta.promptTypeLabel} ${promptType}
${tMeta.domainLabel} ${domain}
${tMeta.outputLengthLabel} ${outputLength}
${tMeta.expertRoleLabel} ${expertRole || (promptType === 'MVP' ? tMeta.mvpExpertPlaceholder : tMeta.agenticExpertPlaceholder)}
${tMeta.missionLabel} ${mission || tMeta.mvpMissionPlaceholder}
${tMeta.constraintsLabel}
${constraints ? formattedConstraints : tMeta.noneSpecified}
${tMeta.finalPromptLangLabel.replace('{TARGET_LANGUAGE}', finalPromptTargetLanguageString)}

${tMeta.constructPromptInstruction}
`;

  if (promptType === 'MVP') {
    userQuery += `
${tMeta.mvpTemplateHeader}

<System>:
${tMeta.mvpSystemRole
    .replace('{expertRolePlaceholder}', expertRole || tMeta.mvpExpertPlaceholder)
    .replace('{missionPlaceholder}', mission || tMeta.mvpMissionPlaceholder)}

<User>:
${rawRequest}

${tMeta.mvpMethodologyHeader}

${tMeta.mvpAnalysisHeader}
${tMeta.mvpAnalysisTasks.map(task => `   ‚Ä¢ ${task}`).join('\n')}

${tMeta.mvpPlanningHeader}
${tMeta.mvpPlanningTasks.map(task => `   ‚Ä¢ ${task}`).join('\n')}

${tMeta.mvpExecutionHeader}
${tMeta.mvpExecutionTasks.map(task => `   ‚Ä¢ ${task}`).join('\n')}

Contraintes sp√©cifiques :
${constraints ? formattedConstraints : tMeta.noneSpecified}

${tMeta.mvpExpectedOutputFormat}
- ${tMeta.mvpLength} ${outputLength}
- ${tMeta.mvpStyle}
- ${tMeta.mvpLanguage.replace('{TARGET_LANGUAGE}', finalPromptTargetLanguageString)}

<Example>:
${tMeta.mvpExampleInstruction}

IMPORTANT: L'exemple ci-dessus doit montrer le format de sortie r√©el - les premi√®res lignes de ce que l'IA devrait produire. NE PAS g√©n√©rer une description de ce que l'IA va faire. Montrer le d√©but concret du livrable.

${tMeta.mvpFooter}
`;
  } else { // AGENTIC
    const criteriaDomain = (domain === 'education' || domain === 'technical') ? domain : 'other';
    const evaluationCriteriaList = tMeta.agenticEvaluationCriteria[criteriaDomain];
    
    const criteriaTableMarkdown = evaluationCriteriaList.map(c => `| ${c.padEnd(29)} |              |                          |                                      |`).join('\n');

    userQuery += `
${tMeta.agenticTemplateHeader}

Title: ${tMeta.agenticTitleInstruction}

Role: ${tMeta.agenticRole.replace('{expertRolePlaceholder}', expertRole || tMeta.agenticExpertPlaceholder)}
${tMeta.agenticNote}

${tMeta.agenticContext}
${rawRequest}

Contraintes sp√©cifiques :
${constraints ? formattedConstraints : tMeta.noneSpecified}

${tMeta.agenticInstructionsHeader}

${tMeta.agenticAnalysisHeader}
${tMeta.agenticAnalysisTasks.map(task => `    ‚Ä¢ ${task}`).join('\n')}

${tMeta.agenticThinkingHeader}
${tMeta.agenticThinkingTasks.map(task => `    ‚Ä¢ ${task}`).join('\n')}

${tMeta.agenticDevelopmentHeader}
${tMeta.agenticDevelopmentTasks.map(task => `    ‚Ä¢ ${task}`).join('\n')}

EXIGENCE DE QUALIT√â: Produisez un livrable de niveau professionnel qui d√©passe les attentes standard en termes de structure, personnalisation et valeur ajout√©e.

${tMeta.agenticSelfAssessmentHeader}
    ${tMeta.agenticSelfAssessmentQuestion1}

    ${tMeta.agenticSelfAssessmentInstruction}
    ${tMeta.agenticEvalTableHeader}
${criteriaTableMarkdown}

    ${tMeta.agenticSelfAssessmentQuestion2}

${tMeta.agenticFooter}
`;
  }

  try {
     const result = await ai.models.generateContent({
        model: GEMINI_MODEL_NAME,
        contents: userQuery,
        config: {
            systemInstruction: systemInstruction,
        }
     });
     
     if (result && typeof result.text === 'string') {
        return new Response(JSON.stringify({ prompt: result.text }), {
          status: 200,
          headers: { 'Content-Type': 'application/json' },
        });
     } else {
        console.error("Gemini API returned an invalid response structure or no text:", result);
        return new Response(JSON.stringify({ error: tApp.generation.error }), { // Use appTranslations for user
          status: 500,
          headers: { 'Content-Type': 'application/json' },
        });
     }
  } catch (error: any) {
    console.error("Error generating prompt with Gemini in Worker:", error);
    let userFriendlyError = tApp.generation.error; // Default from app translations
    
    // It's better to use specific error codes if Gemini API provides them,
    // but for now, we'll use the error message if it exists.
    if (error?.message) {
        if (error.message.includes('API key not valid') || error.message.includes('API_KEY_INVALID')) {
             userFriendlyError = appTranslations[params.language]?.notifications?.apiError || "Gemini API Error: API key not valid. Please check your configuration.";
        } else if (error.message.toLowerCase().includes('quota')) {
            userFriendlyError = appTranslations[params.language]?.notifications?.apiError || "Gemini API Error: Quota exceeded. Please try again later.";
        } else {
            userFriendlyError = `${tApp.generation.error} - ${error.message}`;
        }
    }
    return new Response(JSON.stringify({ error: userFriendlyError, details: error?.message }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
};
